services:
  chromamon:
    build: .
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      wiremock:
        condition: service_started
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${PG_DATABASE_NAME}
      - SPRING_DATA_MONGODB_URI=mongodb://${MG_DATABASE_USER}:${MG_DATABASE_PASS}@mongodb:27017/${MG_DATABASE_NAME}?authSource=admin
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  postgres:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=${PG_DATABASE_NAME}'
      - 'POSTGRES_PASSWORD=${PG_DATABASE_PASS}'
      - 'POSTGRES_USER=${PG_DATABASE_USER}'
    ports:
      - '5433:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${PG_DATABASE_USER} -d ${PG_DATABASE_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  mongodb:
    image: 'mongo:latest'
    environment:
      - 'MONGO_INITDB_DATABASE=${MG_DATABASE_NAME}'
      - 'MONGO_INITDB_ROOT_PASSWORD=${MG_DATABASE_PASS}'
      - 'MONGO_INITDB_ROOT_USERNAME=${MG_DATABASE_USER}'
    ports:
      - '27017:27017'
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  prometheus:
    image: 'prom/prometheus'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
  grafana:
    image: 'grafana/grafana:latest'
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - 'GF_SECURITY_ADMIN_USER=${GF_ADMIN_USER}'
      - 'GF_SECURITY_ADMIN_PASSWORD=${GF_ADMIN_PASS}'
  wiremock:
    image: 'wiremock/wiremock:latest'
    volumes:
      - ./__files:/home/wiremock/__files
      - ./mappings:/home/wiremock/mappings
    entrypoint: ["/docker-entrypoint.sh", "--global-response-templating", "--disable-gzip", "--verbose"]
  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    depends_on:
      - postgres
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/${PG_DATABASE_NAME}?currentSchema=sonar
      SONAR_JDBC_USERNAME: ${PG_DATABASE_USER}
      SONAR_JDBC_PASSWORD: ${PG_DATABASE_PASS}
      SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
      SONAR_SEARCH_JAVAOPTS: -Xmx512m -Xms512m -XX:MaxDirectMemorySize=256m -XX:+UseG1GC
      SONAR_WEB_JAVAOPTS: -Xmx512m -Xms512m -XX:+UseG1GC
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    restart: unless-stopped
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536

volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs: