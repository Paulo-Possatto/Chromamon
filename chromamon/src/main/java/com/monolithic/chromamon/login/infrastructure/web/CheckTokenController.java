package com.monolithic.chromamon.login.infrastructure.web;

import com.monolithic.chromamon.login.application.service.LoginService;
import com.monolithic.chromamon.shared.domain.security.SwaggerType;
import com.monolithic.chromamon.shared.infrastructure.web.GlobalExceptionHandler;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.constraints.NotBlank;
import lombok.RequiredArgsConstructor;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * Controller for checking the token validation.
 */
@RestController
@RequestMapping("/api/v1/auth")
@RequiredArgsConstructor
public class CheckTokenController {

   private final LoginService loginService;

   /**
    * Endpoint for checking the JWT token validation.
    *
    * @param token the string JWT token.
    * @return true or false depending on the validation.
    */
   @Tag(name = SwaggerType.TAG_AUTHENTICATION)
   @Operation(
      summary = "Validate the user token",
      description = "Checks if the user using the application has a valid token",
      operationId = "validateToken"
   )
   @ApiResponses(
      value = {
         @ApiResponse(
            responseCode = "200",
            description = "Successfully checked the token validation",
            content = @Content(
               mediaType = MediaType.APPLICATION_JSON_VALUE,
               schema = @Schema(
                  implementation = Boolean.class
               ),
               examples = {
                  @ExampleObject(
                     name = "Valid token",
                     description = "The returned boolean if the token is valid",
                     value = "true"
                  ),
                  @ExampleObject(
                     name = "Invalid token",
                     description = "The returned boolean if the token is not valid",
                     value = "false"
                  )
               }
            )
         ),
         @ApiResponse(
            responseCode = "500",
            description = "Some error occurred while validating the token, contact the IT",
            content = @Content(
               mediaType = MediaType.APPLICATION_JSON_VALUE,
               schema = @Schema(
                  implementation = GlobalExceptionHandler.ErrorResponse.class,
                  example = """
                     {
                         "timestamp": "2025-08-29T20:13:30.565819877",
                         "status": 500,
                         "error": "Internal Server Error",
                         "message": "Internal Server Error",
                         "path": "/api/v1/auth/validate",
                         "validationErrors": null
                     }
                     """
               )
            )
         )
      }
   )
   @PostMapping(
      value = "/validate",
      produces = MediaType.APPLICATION_JSON_VALUE)
   public ResponseEntity<Boolean> validateToken(
      @RequestParam
      @NotBlank(message = "")
      @Parameter(
         name = "token",
         description = "The string value of the JWT token generated by the application",
         required = true,
         schema = @Schema(
            implementation = String.class
         ),
         in = ParameterIn.QUERY
      )
      String token) {
      boolean isValid = loginService.validateToken(token);
      return ResponseEntity.ok(isValid);
   }
}
