name: CI/CD Pipeline DEV

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./chromamon
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21
      - name: Enforcer
        run: mvn enforcer:enforce
      - name: Format check (google-java-format)
        run: mvn fmt:check
      - name: Spotless check
        run: mvn spotless:check

  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./chromamon
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21
      - name: Build without tests
        run: mvn clean install -DskipTests

  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./chromamon
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21
      - name: Run tests
        run: mvn test

  sonarqube:
    runs-on: ubuntu-latest
    environment: DEV
    defaults:
      run:
        working-directory: ./chromamon
    needs: test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        run: |
          mvn -B verify sonar:sonar \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    environment: DEV
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./chromamon
          file: ./chromamon/Dockerfile
          push: true
          tags: paulopossatto/chromamon:latest

  deploy:
    runs-on: ubuntu-latest
    environment: DEV
    needs: docker
    steps:
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 2222
          script: |
            cd /home/${{ secrets.SSH_USER }}/app
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            docker compose pull
            docker compose up -d
            docker logout
