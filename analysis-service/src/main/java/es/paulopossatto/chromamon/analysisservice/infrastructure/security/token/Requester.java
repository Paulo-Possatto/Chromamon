package es.paulopossatto.chromamon.analysisservice.infrastructure.security.token;

import com.google.gson.annotations.SerializedName;
import es.paulopossatto.chromamon.analysisservice.application.exception.BadRequestException;
import java.util.Collections;
import java.util.Set;
import java.util.UUID;
import lombok.Getter;

/** Claim set information about the user requesting the resource. */
@Getter
public class Requester {
  @SerializedName("uuid")
  private final String uuid; // Generated by the login service

  @SerializedName("name")
  private final String name;

  @SerializedName("surname")
  private final String surname;

  @SerializedName("email")
  private final String email;

  @SerializedName("admin")
  private final boolean isAdmin;

  @SerializedName("roles")
  private final Set<String> roles;

  /** Empty constructor. */
  public Requester() {
    this.uuid = null;
    this.name = null;
    this.surname = null;
    this.email = null;
    this.isAdmin = false;
    this.roles = Collections.emptySet();
  }

  /** Constructor for the claim set. */
  public Requester(
      String uuid, String name, String surname, String email, boolean isAdmin, Set<String> roles) {
    this.uuid = uuid;
    this.name = name;
    this.surname = surname;
    this.email = email;
    this.isAdmin = isAdmin;
    this.roles = roles;
    this.validate();
  }

  final void validate() {
    try {
      UUID.fromString(this.uuid);
    } catch (IllegalArgumentException e) {
      throw new BadRequestException("Invalid uuid claim");
    }
    if (name == null || name.trim().length() < 3 || name.trim().length() > 50) {
      throw new BadRequestException("name claim is null, too short or too long");
    }
    if (surname == null || surname.trim().length() < 3 || surname.trim().length() > 50) {
      throw new BadRequestException("surname claim is null, too short or too long");
    }
    if (email == null || !email.matches("^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}$")) {
      throw new BadRequestException("email claim is null or is wrong");
    }
    if (roles == null || roles.isEmpty()) {
      throw new BadRequestException("roles claim is null or empty");
    }
  }
}
